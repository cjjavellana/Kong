// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: kong_admin_proxy.proto

package ipc

import (
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type NodeInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NodeInfoRequest) Reset() {
	*x = NodeInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kong_admin_proxy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfoRequest) ProtoMessage() {}

func (x *NodeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kong_admin_proxy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfoRequest.ProtoReflect.Descriptor instead.
func (*NodeInfoRequest) Descriptor() ([]byte, []int) {
	return file_kong_admin_proxy_proto_rawDescGZIP(), []int{0}
}

type KeyValuePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValuePair) Reset() {
	*x = KeyValuePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kong_admin_proxy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValuePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValuePair) ProtoMessage() {}

func (x *KeyValuePair) ProtoReflect() protoreflect.Message {
	mi := &file_kong_admin_proxy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValuePair.ProtoReflect.Descriptor instead.
func (*KeyValuePair) Descriptor() ([]byte, []int) {
	return file_kong_admin_proxy_proto_rawDescGZIP(), []int{1}
}

func (x *KeyValuePair) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KeyValuePair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Listener struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Listener      string `protobuf:"bytes,1,opt,name=listener,proto3" json:"listener,omitempty"`
	ProxyProtocol bool   `protobuf:"varint,2,opt,name=proxyProtocol,json=proxy_protocol,proto3" json:"proxyProtocol,omitempty"`
	ReusePort     bool   `protobuf:"varint,3,opt,name=reusePort,json=reuseport,proto3" json:"reusePort,omitempty"`
	Backlog       bool   `protobuf:"varint,4,opt,name=backlog,proto3" json:"backlog,omitempty"`
	Deferred      bool   `protobuf:"varint,5,opt,name=deferred,proto3" json:"deferred,omitempty"`
	Ssl           bool   `protobuf:"varint,6,opt,name=ssl,proto3" json:"ssl,omitempty"`
	Ip            string `protobuf:"bytes,7,opt,name=ip,proto3" json:"ip,omitempty"`
	Port          int32  `protobuf:"varint,8,opt,name=port,proto3" json:"port,omitempty"`
	Http2         bool   `protobuf:"varint,9,opt,name=http2,proto3" json:"http2,omitempty"`
	Bind          bool   `protobuf:"varint,10,opt,name=bind,proto3" json:"bind,omitempty"`
}

func (x *Listener) Reset() {
	*x = Listener{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kong_admin_proxy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Listener) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Listener) ProtoMessage() {}

func (x *Listener) ProtoReflect() protoreflect.Message {
	mi := &file_kong_admin_proxy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Listener.ProtoReflect.Descriptor instead.
func (*Listener) Descriptor() ([]byte, []int) {
	return file_kong_admin_proxy_proto_rawDescGZIP(), []int{2}
}

func (x *Listener) GetListener() string {
	if x != nil {
		return x.Listener
	}
	return ""
}

func (x *Listener) GetProxyProtocol() bool {
	if x != nil {
		return x.ProxyProtocol
	}
	return false
}

func (x *Listener) GetReusePort() bool {
	if x != nil {
		return x.ReusePort
	}
	return false
}

func (x *Listener) GetBacklog() bool {
	if x != nil {
		return x.Backlog
	}
	return false
}

func (x *Listener) GetDeferred() bool {
	if x != nil {
		return x.Deferred
	}
	return false
}

func (x *Listener) GetSsl() bool {
	if x != nil {
		return x.Ssl
	}
	return false
}

func (x *Listener) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Listener) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Listener) GetHttp2() bool {
	if x != nil {
		return x.Http2
	}
	return false
}

func (x *Listener) GetBind() bool {
	if x != nil {
		return x.Bind
	}
	return false
}

type Plugins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnabledInCluster  []string        `protobuf:"bytes,1,rep,name=enabledInCluster,json=enabled_in_cluster,proto3" json:"enabledInCluster,omitempty"`
	AvailableOnServer map[string]bool `protobuf:"bytes,2,rep,name=availableOnServer,json=available_on_server,proto3" json:"availableOnServer,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Plugins) Reset() {
	*x = Plugins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kong_admin_proxy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plugins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plugins) ProtoMessage() {}

func (x *Plugins) ProtoReflect() protoreflect.Message {
	mi := &file_kong_admin_proxy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plugins.ProtoReflect.Descriptor instead.
func (*Plugins) Descriptor() ([]byte, []int) {
	return file_kong_admin_proxy_proto_rawDescGZIP(), []int{3}
}

func (x *Plugins) GetEnabledInCluster() []string {
	if x != nil {
		return x.EnabledInCluster
	}
	return nil
}

func (x *Plugins) GetAvailableOnServer() map[string]bool {
	if x != nil {
		return x.AvailableOnServer
	}
	return nil
}

type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminAccessLog                     string              `protobuf:"bytes,1,opt,name=adminAccessLog,json=admin_access_log,proto3" json:"adminAccessLog,omitempty"`
	NginxProxyRealIpRecursive          string              `protobuf:"bytes,2,opt,name=nginxProxyRealIpRecursive,json=nginx_proxy_real_ip_recursive,proto3" json:"nginxProxyRealIpRecursive,omitempty"`
	AnonymousReports                   bool                `protobuf:"varint,3,opt,name=anonymousReports,json=anonymous_reports,proto3" json:"anonymousReports,omitempty"`
	StatusListen                       []string            `protobuf:"bytes,4,rep,name=statusListen,json=status_listen,proto3" json:"statusListen,omitempty"`
	LoadedPlugins                      map[string]bool     `protobuf:"bytes,5,rep,name=loadedPlugins,json=loaded_plugins,proto3" json:"loadedPlugins,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Prefix                             string              `protobuf:"bytes,6,opt,name=prefix,proto3" json:"prefix,omitempty"`
	UpstreamKeepaliveMaxRequests       float32             `protobuf:"fixed32,7,opt,name=upstreamKeepaliveMaxRequests,json=upstream_keepalive_max_requests,proto3" json:"upstreamKeepaliveMaxRequests,omitempty"`
	DbResurrectTtl                     float32             `protobuf:"fixed32,8,opt,name=dbResurrectTtl,json=db_resurrect_ttl,proto3" json:"dbResurrectTtl,omitempty"`
	NginxEventsDirectives              []*KeyValuePair     `protobuf:"bytes,9,rep,name=nginxEventsDirectives,json=nginx_events_directives,proto3" json:"nginxEventsDirectives,omitempty"`
	NginxSupstreamDirectives           map[string]*any.Any `protobuf:"bytes,10,rep,name=nginxSupstreamDirectives,json=nginx_supstream_directives,proto3" json:"nginxSupstreamDirectives,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LuaPackageCpath                    string              `protobuf:"bytes,11,opt,name=luaPackageCpath,json=lua_package_cpath,proto3" json:"luaPackageCpath,omitempty"`
	PgUser                             string              `protobuf:"bytes,12,opt,name=pgUser,json=pg_user,proto3" json:"pgUser,omitempty"`
	NginxKongStreamConf                string              `protobuf:"bytes,13,opt,name=nginxKongStreamConf,json=nginx_kong_stream_conf,proto3" json:"nginxKongStreamConf,omitempty"`
	DbUpdateFrequency                  float32             `protobuf:"fixed32,14,opt,name=dbUpdateFrequency,json=db_update_frequency,proto3" json:"dbUpdateFrequency,omitempty"`
	NginxUpstreamKeepaliveRequests     string              `protobuf:"bytes,15,opt,name=nginxUpstreamKeepaliveRequests,json=nginx_upstream_keepalive_requests,proto3" json:"nginxUpstreamKeepaliveRequests,omitempty"`
	CassandraContactPoints             []string            `protobuf:"bytes,16,rep,name=cassandraContactPoints,json=cassandra_contact_points,proto3" json:"cassandraContactPoints,omitempty"`
	CassandraReplFactor                float32             `protobuf:"fixed32,17,opt,name=cassandraReplFactor,json=cassandra_repl_factor,proto3" json:"cassandraReplFactor,omitempty"`
	RealIpRecursive                    string              `protobuf:"bytes,18,opt,name=realIpRecursive,json=real_ip_recursive,proto3" json:"realIpRecursive,omitempty"`
	NginxHttpUpstreamKeepaliveTimeout  string              `protobuf:"bytes,19,opt,name=nginxHttpUpstreamKeepaliveTimeout,json=nginx_http_upstream_keepalive_timeout,proto3" json:"nginxHttpUpstreamKeepaliveTimeout,omitempty"`
	PgSslVerify                        bool                `protobuf:"varint,20,opt,name=pgSslVerify,json=pg_ssl_verify,proto3" json:"pgSslVerify,omitempty"`
	AdminSslCertKey                    string              `protobuf:"bytes,21,opt,name=adminSslCertKey,json=admin_ssl_cert_key,proto3" json:"adminSslCertKey,omitempty"`
	SslSessionTickets                  string              `protobuf:"bytes,22,opt,name=sslSessionTickets,json=ssl_session_tickets,proto3" json:"sslSessionTickets,omitempty"`
	DnsErrorTtl                        float32             `protobuf:"fixed32,23,opt,name=dnsErrorTtl,json=dns_error_ttl,proto3" json:"dnsErrorTtl,omitempty"`
	NginxOptimizations                 bool                `protobuf:"varint,24,opt,name=nginxOptimizations,json=nginx_optimizations,proto3" json:"nginxOptimizations,omitempty"`
	NginxStreamDirectives              []*KeyValuePair     `protobuf:"bytes,25,rep,name=nginxStreamDirectives,json=nginx_stream_directives,proto3" json:"nginxStreamDirectives,omitempty"`
	ProxyListeners                     []*Listener         `protobuf:"bytes,26,rep,name=proxyListeners,json=proxy_listeners,proto3" json:"proxyListeners,omitempty"`
	NginxWorkerProcesses               string              `protobuf:"bytes,27,opt,name=nginxWorkerProcesses,json=nginx_worker_processes,proto3" json:"nginxWorkerProcesses,omitempty"`
	AdminSslCertDefault                string              `protobuf:"bytes,28,opt,name=adminSslCertDefault,json=admin_ssl_cert_default,proto3" json:"adminSslCertDefault,omitempty"`
	Role                               string              `protobuf:"bytes,29,opt,name=role,proto3" json:"role,omitempty"`
	Database                           string              `protobuf:"bytes,30,opt,name=database,proto3" json:"database,omitempty"`
	Headers                            []string            `protobuf:"bytes,31,rep,name=headers,proto3" json:"headers,omitempty"`
	StatusListeners                    map[string]*any.Any `protobuf:"bytes,32,rep,name=statusListeners,json=status_listeners,proto3" json:"statusListeners,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NginxAdminDirectives               map[string]*any.Any `protobuf:"bytes,33,rep,name=nginxAdminDirectives,json=nginx_admin_directives,proto3" json:"nginxAdminDirectives,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StatusAccessLog                    string              `protobuf:"bytes,34,opt,name=statusAccessLog,json=status_access_log,proto3" json:"statusAccessLog,omitempty"`
	TrustedIps                         map[string]*any.Any `protobuf:"bytes,35,rep,name=trustedIps,json=trusted_ips,proto3" json:"trustedIps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NginxSproxyDirectives              map[string]*any.Any `protobuf:"bytes,36,rep,name=nginxSproxyDirectives,json=nginx_sproxy_directives,proto3" json:"nginxSproxyDirectives,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SslCert                            string              `protobuf:"bytes,37,opt,name=sslCert,json=ssl_cert,proto3" json:"sslCert,omitempty"`
	ProxyAccessLog                     string              `protobuf:"bytes,38,opt,name=proxyAccessLog,json=proxy_access_log,proto3" json:"proxyAccessLog,omitempty"`
	PgSemaphoreTimeout                 float32             `protobuf:"fixed32,39,opt,name=pgSemaphoreTimeout,json=pg_semaphore_timeout,proto3" json:"pgSemaphoreTimeout,omitempty"`
	UpstreamKeepaliveIdleTimeout       float32             `protobuf:"fixed32,40,opt,name=upstreamKeepaliveIdleTimeout,json=upstream_keepalive_idle_timeout,proto3" json:"upstreamKeepaliveIdleTimeout,omitempty"`
	PgPort                             float32             `protobuf:"fixed32,41,opt,name=pgPort,json=pg_port,proto3" json:"pgPort,omitempty"`
	MemCacheSize                       string              `protobuf:"bytes,42,opt,name=memCacheSize,json=mem_cache_size,proto3" json:"memCacheSize,omitempty"`
	GoPluginsDir                       string              `protobuf:"bytes,43,opt,name=goPluginsDir,json=go_plugins_dir,proto3" json:"goPluginsDir,omitempty"`
	NginxProxyRealIpHeader             string              `protobuf:"bytes,44,opt,name=nginxProxyRealIpHeader,json=nginx_proxy_real_ip_header,proto3" json:"nginxProxyRealIpHeader,omitempty"`
	ClientMaxBodySize                  string              `protobuf:"bytes,45,opt,name=clientMaxBodySize,json=client_max_body_size,proto3" json:"clientMaxBodySize,omitempty"`
	DnsResolver                        map[string]*any.Any `protobuf:"bytes,46,rep,name=dnsResolver,json=dns_resolver,proto3" json:"dnsResolver,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SslPreferServerCiphers             string              `protobuf:"bytes,47,opt,name=sslPreferServerCiphers,json=ssl_prefer_server_ciphers,proto3" json:"sslPreferServerCiphers,omitempty"`
	DbCacheWarmupEntities              []string            `protobuf:"bytes,48,rep,name=dbCacheWarmupEntities,json=db_cache_warmup_entities,proto3" json:"dbCacheWarmupEntities,omitempty"`
	DnsStaleTtl                        float32             `protobuf:"fixed32,49,opt,name=dnsStaleTtl,json=dns_stale_ttl,proto3" json:"dnsStaleTtl,omitempty"`
	ClusterMtls                        string              `protobuf:"bytes,50,opt,name=clusterMtls,json=cluster_mtls,proto3" json:"clusterMtls,omitempty"`
	StatusErrorLog                     string              `protobuf:"bytes,51,opt,name=statusErrorLog,json=status_error_log,proto3" json:"statusErrorLog,omitempty"`
	NginxStreamSslPreferServerCiphers  string              `protobuf:"bytes,52,opt,name=nginxStreamSslPreferServerCiphers,json=nginx_stream_ssl_prefer_server_ciphers,proto3" json:"nginxStreamSslPreferServerCiphers,omitempty"`
	ProxyListen                        []string            `protobuf:"bytes,53,rep,name=proxyListen,json=proxy_listen,proto3" json:"proxyListen,omitempty"`
	ClientSslCertDefault               string              `protobuf:"bytes,54,opt,name=clientSslCertDefault,json=client_ssl_cert_default,proto3" json:"clientSslCertDefault,omitempty"`
	EnabledHeaders                     map[string]bool     `protobuf:"bytes,55,rep,name=enabledHeaders,json=enabled_headers,proto3" json:"enabledHeaders,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AdminSslCertKeyDefault             string              `protobuf:"bytes,56,opt,name=adminSslCertKeyDefault,json=admin_ssl_cert_key_default,proto3" json:"adminSslCertKeyDefault,omitempty"`
	WorkerConsistency                  string              `protobuf:"bytes,57,opt,name=workerConsistency,json=worker_consistency,proto3" json:"workerConsistency,omitempty"`
	NginxHttpDirectives                []*KeyValuePair     `protobuf:"bytes,58,rep,name=nginxHttpDirectives,json=nginx_http_directives,proto3" json:"nginxHttpDirectives,omitempty"`
	CassandraSsl                       bool                `protobuf:"varint,59,opt,name=cassandraSsl,json=cassandra_ssl,proto3" json:"cassandraSsl,omitempty"`
	AdminSslCert                       string              `protobuf:"bytes,60,opt,name=adminSslCert,json=admin_ssl_cert,proto3" json:"adminSslCert,omitempty"`
	StreamProxySslEnabled              bool                `protobuf:"varint,61,opt,name=streamProxySslEnabled,json=stream_proxy_ssl_enabled,proto3" json:"streamProxySslEnabled,omitempty"`
	CassandraLbPolicy                  string              `protobuf:"bytes,62,opt,name=cassandraLbPolicy,json=cassandra_lb_policy,proto3" json:"cassandraLbPolicy,omitempty"`
	SslProtocols                       string              `protobuf:"bytes,63,opt,name=sslProtocols,json=ssl_protocols,proto3" json:"sslProtocols,omitempty"`
	PortMaps                           map[string]*any.Any `protobuf:"bytes,64,rep,name=portMaps,json=port_maps,proto3" json:"portMaps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UpstreamKeepalive                  float32             `protobuf:"fixed32,65,opt,name=upstreamKeepalive,json=upstream_keepalive,proto3" json:"upstreamKeepalive,omitempty"`
	CassandraSslVerify                 bool                `protobuf:"varint,66,opt,name=cassandraSslVerify,json=cassandra_ssl_verify,proto3" json:"cassandraSslVerify,omitempty"`
	RealIpHeader                       string              `protobuf:"bytes,67,opt,name=realIpHeader,json=real_ip_header,proto3" json:"realIpHeader,omitempty"`
	NginxDaemon                        string              `protobuf:"bytes,68,opt,name=nginxDaemon,json=nginx_daemon,proto3" json:"nginxDaemon,omitempty"`
	StreamListeners                    map[string]*any.Any `protobuf:"bytes,69,rep,name=streamListeners,json=stream_listeners,proto3" json:"streamListeners,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SslCiphers                         string              `protobuf:"bytes,70,opt,name=sslCiphers,json=ssl_ciphers,proto3" json:"sslCiphers,omitempty"`
	CassandraSchemaConsensusTimeout    float32             `protobuf:"fixed32,71,opt,name=cassandraSchemaConsensusTimeout,json=cassandra_schema_consensus_timeout,proto3" json:"cassandraSchemaConsensusTimeout,omitempty"`
	NginxHttpUpstreamKeepaliveRequests string              `protobuf:"bytes,72,opt,name=nginxHttpUpstreamKeepaliveRequests,json=nginx_http_upstream_keepalive_requests,proto3" json:"nginxHttpUpstreamKeepaliveRequests,omitempty"`
	ProxySslEnabled                    bool                `protobuf:"varint,73,opt,name=proxySslEnabled,json=proxy_ssl_enabled,proto3" json:"proxySslEnabled,omitempty"`
	ClientSslCertKeyDefault            string              `protobuf:"bytes,74,opt,name=clientSslCertKeyDefault,json=client_ssl_cert_key_default,proto3" json:"clientSslCertKeyDefault,omitempty"`
	ClusterListen                      []string            `protobuf:"bytes,75,rep,name=clusterListen,json=cluster_listen,proto3" json:"clusterListen,omitempty"`
	PgSsl                              bool                `protobuf:"varint,76,opt,name=pgSsl,json=pg_ssl,proto3" json:"pgSsl,omitempty"`
	SslCertKey                         string              `protobuf:"bytes,77,opt,name=sslCertKey,json=ssl_cert_key,proto3" json:"sslCertKey,omitempty"`
	LuaSocketPoolSize                  float32             `protobuf:"fixed32,78,opt,name=luaSocketPoolSize,json=lua_socket_pool_size,proto3" json:"luaSocketPoolSize,omitempty"`
	WorkerStateUpdateFrequency         float32             `protobuf:"fixed32,79,opt,name=workerStateUpdateFrequency,json=worker_state_update_frequency,proto3" json:"workerStateUpdateFrequency,omitempty"`
	PgRoSsl                            bool                `protobuf:"varint,80,opt,name=pgRoSsl,json=pg_ro_ssl,proto3" json:"pgRoSsl,omitempty"`
	NginxEventsWorkerConnections       string              `protobuf:"bytes,81,opt,name=nginxEventsWorkerConnections,json=nginx_events_worker_connections,proto3" json:"nginxEventsWorkerConnections,omitempty"`
	NginxMainDaemon                    string              `protobuf:"bytes,82,opt,name=nginxMainDaemon,json=nginx_main_daemon,proto3" json:"nginxMainDaemon,omitempty"`
	DnsNoSync                          bool                `protobuf:"varint,83,opt,name=dnsNoSync,json=dns_no_sync,proto3" json:"dnsNoSync,omitempty"`
	AdminListen                        []string            `protobuf:"bytes,84,rep,name=adminListen,json=admin_listen,proto3" json:"adminListen,omitempty"`
	CassandraPort                      float32             `protobuf:"fixed32,85,opt,name=cassandraPort,json=cassandra_port,proto3" json:"cassandraPort,omitempty"`
	NginxMainDirectives                []*KeyValuePair     `protobuf:"bytes,86,rep,name=nginxMainDirectives,json=nginx_main_directives,proto3" json:"nginxMainDirectives,omitempty"`
	StatusSslCertDefault               string              `protobuf:"bytes,87,opt,name=statusSslCertDefault,json=status_ssl_cert_default,proto3" json:"statusSslCertDefault,omitempty"`
	ClientBodyBufferSize               string              `protobuf:"bytes,88,opt,name=clientBodyBufferSize,json=client_body_buffer_size,proto3" json:"clientBodyBufferSize,omitempty"`
	NginxUpstreamDirectives            []*KeyValuePair     `protobuf:"bytes,89,rep,name=nginxUpstreamDirectives,json=nginx_upstream_directives,proto3" json:"nginxUpstreamDirectives,omitempty"`
	NginxHttpSslPreferServerCiphers    string              `protobuf:"bytes,90,opt,name=nginxHttpSslPreferServerCiphers,json=nginx_http_ssl_prefer_server_ciphers,proto3" json:"nginxHttpSslPreferServerCiphers,omitempty"`
	NginxStreamSslSessionTimeout       string              `protobuf:"bytes,91,opt,name=nginxStreamSslSessionTimeout,json=nginx_stream_ssl_session_timeout,proto3" json:"nginxStreamSslSessionTimeout,omitempty"`
	PgTimeout                          float32             `protobuf:"fixed32,92,opt,name=pgTimeout,json=pg_timeout,proto3" json:"pgTimeout,omitempty"`
	NginxHttpClientMaxBodySize         string              `protobuf:"bytes,93,opt,name=nginxHttpClientMaxBodySize,json=nginx_http_client_max_body_size,proto3" json:"nginxHttpClientMaxBodySize,omitempty"`
	StatusSslEnabled                   bool                `protobuf:"varint,94,opt,name=statusSslEnabled,json=status_ssl_enabled,proto3" json:"statusSslEnabled,omitempty"`
	NginxUpstreamKeepaliveTimeout      string              `protobuf:"bytes,95,opt,name=nginxUpstreamKeepaliveTimeout,json=nginx_upstream_keepalive_timeout,proto3" json:"nginxUpstreamKeepaliveTimeout,omitempty"`
	NginxHttpStatusDirectives          map[string]*any.Any `protobuf:"bytes,96,rep,name=nginxHttpStatusDirectives,json=nginx_http_status_directives,proto3" json:"nginxHttpStatusDirectives,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DnsHostsfile                       string              `protobuf:"bytes,97,opt,name=dnsHostsfile,json=dns_hostsfile,proto3" json:"dnsHostsfile,omitempty"`
	Plugins                            []string            `protobuf:"bytes,98,rep,name=plugins,proto3" json:"plugins,omitempty"`
	CassandraUsername                  string              `protobuf:"bytes,99,opt,name=cassandraUsername,json=cassandra_username,proto3" json:"cassandraUsername,omitempty"`
	NginxErrLogs                       string              `protobuf:"bytes,100,opt,name=nginxErrLogs,json=nginx_err_logs,proto3" json:"nginxErrLogs,omitempty"`
	NginxMainWorkerProcesses           string              `protobuf:"bytes,101,opt,name=nginxMainWorkerProcesses,json=nginx_main_worker_processes,proto3" json:"nginxMainWorkerProcesses,omitempty"`
	Kic                                bool                `protobuf:"varint,102,opt,name=kic,proto3" json:"kic,omitempty"`
	ClusterControlPlane                string              `protobuf:"bytes,103,opt,name=clusterControlPlane,json=cluster_control_plane,proto3" json:"clusterControlPlane,omitempty"`
	NginxHttpClientBodyBufferSize      string              `protobuf:"bytes,104,opt,name=nginxHttpClientBodyBufferSize,json=nginx_http_client_body_buffer_size,proto3" json:"nginxHttpClientBodyBufferSize,omitempty"`
	NginxKongConf                      string              `protobuf:"bytes,105,opt,name=nginxKongConf,json=nginx_kong_conf,proto3" json:"nginxKongConf,omitempty"`
	ClientSsl                          bool                `protobuf:"varint,106,opt,name=clientSsl,json=client_ssl,proto3" json:"clientSsl,omitempty"`
	SslCertDefault                     string              `protobuf:"bytes,107,opt,name=sslCertDefault,json=ssl_cert_default,proto3" json:"sslCertDefault,omitempty"`
	DnsOrder                           []string            `protobuf:"bytes,108,rep,name=dnsOrder,json=dns_order,proto3" json:"dnsOrder,omitempty"`
	NginxProxyDirectives               []*KeyValuePair     `protobuf:"bytes,109,rep,name=nginxProxyDirectives,json=nginx_proxy_directives,proto3" json:"nginxProxyDirectives,omitempty"`
	StatusSslCertKeyDefault            string              `protobuf:"bytes,110,opt,name=statusSslCertKeyDefault,json=status_ssl_cert_key_default,proto3" json:"statusSslCertKeyDefault,omitempty"`
	AdminListeners                     []*Listener         `protobuf:"bytes,111,rep,name=adminListeners,json=admin_listeners,proto3" json:"adminListeners,omitempty"`
	NginxConf                          string              `protobuf:"bytes,112,opt,name=nginxConf,json=nginx_conf,proto3" json:"nginxConf,omitempty"`
	AdminSslEnabled                    bool                `protobuf:"varint,113,opt,name=adminSslEnabled,json=admin_ssl_enabled,proto3" json:"adminSslEnabled,omitempty"`
	NginxHttpUpstreamKeepalive         string              `protobuf:"bytes,114,opt,name=nginxHttpUpstreamKeepalive,json=nginx_http_upstream_keepalive,proto3" json:"nginxHttpUpstreamKeepalive,omitempty"`
	PgHost                             string              `protobuf:"bytes,115,opt,name=pgHost,json=pg_host,proto3" json:"pgHost,omitempty"`
	GoPluginserverExe                  string              `protobuf:"bytes,116,opt,name=goPluginserverExe,json=go_pluginserver_exe,proto3" json:"goPluginserverExe,omitempty"`
	DbCacheTtl                         float32             `protobuf:"fixed32,117,opt,name=dbCacheTtl,json=db_cache_ttl,proto3" json:"dbCacheTtl,omitempty"`
	UpstreamKeepalivePoolSize          float32             `protobuf:"fixed32,118,opt,name=upstreamKeepalivePoolSize,json=upstream_keepalive_pool_size,proto3" json:"upstreamKeepalivePoolSize,omitempty"`
	AdminAccLogs                       string              `protobuf:"bytes,119,opt,name=adminAccLogs,json=admin_acc_logs,proto3" json:"adminAccLogs,omitempty"`
	NginxEventsMultiAccept             string              `protobuf:"bytes,120,opt,name=nginxEventsMultiAccept,json=nginx_events_multi_accept,proto3" json:"nginxEventsMultiAccept,omitempty"`
	SslCertKeyDefault                  string              `protobuf:"bytes,121,opt,name=sslCertKeyDefault,json=ssl_cert_key_default,proto3" json:"sslCertKeyDefault,omitempty"`
	LuaSslVerifyDepth                  float32             `protobuf:"fixed32,122,opt,name=luaSslVerifyDepth,json=lua_ssl_verify_depth,proto3" json:"luaSslVerifyDepth,omitempty"`
	CassandraReadConsistency           string              `protobuf:"bytes,123,opt,name=cassandraReadConsistency,json=cassandra_read_consistency,proto3" json:"cassandraReadConsistency,omitempty"`
	DbUpdatePropagation                float32             `protobuf:"fixed32,124,opt,name=dbUpdatePropagation,json=db_update_propagation,proto3" json:"dbUpdatePropagation,omitempty"`
	NginxStreamSslSessionTickets       string              `protobuf:"bytes,125,opt,name=nginxStreamSslSessionTickets,json=nginx_stream_ssl_session_tickets,proto3" json:"nginxStreamSslSessionTickets,omitempty"`
	PgMaxConcurrentQueries             float32             `protobuf:"fixed32,126,opt,name=pgMaxConcurrentQueries,json=pg_max_concurrent_queries,proto3" json:"pgMaxConcurrentQueries,omitempty"`
	DnsNotFoundTtl                     float32             `protobuf:"fixed32,127,opt,name=dnsNotFoundTtl,json=dns_not_found_ttl,proto3" json:"dnsNotFoundTtl,omitempty"`
	StreamListen                       []string            `protobuf:"bytes,128,rep,name=streamListen,json=stream_listen,proto3" json:"streamListen,omitempty"`
	CassandraRefreshFrequency          float32             `protobuf:"fixed32,129,opt,name=cassandraRefreshFrequency,json=cassandra_refresh_frequency,proto3" json:"cassandraRefreshFrequency,omitempty"`
	LogLevel                           string              `protobuf:"bytes,130,opt,name=logLevel,json=log_level,proto3" json:"logLevel,omitempty"`
	NginxStreamSslProtocols            string              `protobuf:"bytes,131,opt,name=nginxStreamSslProtocols,json=nginx_stream_ssl_protocols,proto3" json:"nginxStreamSslProtocols,omitempty"`
	ErrorDefaultType                   string              `protobuf:"bytes,132,opt,name=errorDefaultType,json=error_default_type,proto3" json:"errorDefaultType,omitempty"`
	PgRoSslVerify                      bool                `protobuf:"varint,133,opt,name=pgRoSslVerify,json=pg_ro_ssl_verify,proto3" json:"pgRoSslVerify,omitempty"`
	NginxHttpSslSessionTickets         string              `protobuf:"bytes,134,opt,name=nginxHttpSslSessionTickets,json=nginx_http_ssl_session_tickets,proto3" json:"nginxHttpSslSessionTickets,omitempty"`
	CassandraReplStrategy              string              `protobuf:"bytes,135,opt,name=cassandraReplStrategy,json=cassandra_repl_strategy,proto3" json:"cassandraReplStrategy,omitempty"`
	CassandraTimeout                   float32             `protobuf:"fixed32,136,opt,name=cassandraTimeout,json=cassandra_timeout,proto3" json:"cassandraTimeout,omitempty"`
	NginxHttpUpstreamDirectives        []*KeyValuePair     `protobuf:"bytes,137,rep,name=nginxHttpUpstreamDirectives,json=nginx_http_upstream_directives,proto3" json:"nginxHttpUpstreamDirectives,omitempty"`
	NginxAccLogs                       string              `protobuf:"bytes,138,opt,name=nginxAccLogs,json=nginx_acc_logs,proto3" json:"nginxAccLogs,omitempty"`
	NginxHttpSslSessionTimeout         string              `protobuf:"bytes,139,opt,name=nginxHttpSslSessionTimeout,json=nginx_http_ssl_session_timeout,proto3" json:"nginxHttpSslSessionTimeout,omitempty"`
	ProxyErrorLog                      string              `protobuf:"bytes,140,opt,name=proxyErrorLog,json=proxy_error_log,proto3" json:"proxyErrorLog,omitempty"`
	CassandraKeyspace                  string              `protobuf:"bytes,141,opt,name=cassandraKeyspace,json=cassandra_keyspace,proto3" json:"cassandraKeyspace,omitempty"`
	HostPorts                          map[string]*any.Any `protobuf:"bytes,142,rep,name=hostPorts,json=host_ports,proto3" json:"hostPorts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SslCertCsrDefault                  string              `protobuf:"bytes,143,opt,name=sslCertCsrDefault,json=ssl_cert_csr_default,proto3" json:"sslCertCsrDefault,omitempty"`
	CassandraWriteConsistency          string              `protobuf:"bytes,144,opt,name=cassandraWriteConsistency,json=cassandra_write_consistency,proto3" json:"cassandraWriteConsistency,omitempty"`
	LuaPackagePath                     string              `protobuf:"bytes,145,opt,name=luaPackagePath,json=lua_package_path,proto3" json:"luaPackagePath,omitempty"`
	NginxStatusDirectives              map[string]*any.Any `protobuf:"bytes,146,rep,name=nginxStatusDirectives,json=nginx_status_directives,proto3" json:"nginxStatusDirectives,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PgPassword                         string              `protobuf:"bytes,147,opt,name=pgPassword,json=pg_password,proto3" json:"pgPassword,omitempty"`
	NginxPid                           string              `protobuf:"bytes,148,opt,name=nginxPid,json=nginx_pid,proto3" json:"nginxPid,omitempty"`
	NginxHttpSslProtocols              string              `protobuf:"bytes,149,opt,name=nginxHttpSslProtocols,json=nginx_http_ssl_protocols,proto3" json:"nginxHttpSslProtocols,omitempty"`
	CassandraDataCenters               []string            `protobuf:"bytes,150,rep,name=cassandraDataCenters,json=cassandra_data_centers,proto3" json:"cassandraDataCenters,omitempty"`
	SslSessionTimeout                  string              `protobuf:"bytes,151,opt,name=sslSessionTimeout,json=ssl_session_timeout,proto3" json:"sslSessionTimeout,omitempty"`
	NginxUpstreamKeepalive             string              `protobuf:"bytes,152,opt,name=nginxUpstreamKeepalive,json=nginx_upstream_keepalive,proto3" json:"nginxUpstreamKeepalive,omitempty"`
	AdminErrorLog                      string              `protobuf:"bytes,153,opt,name=adminErrorLog,json=admin_error_log,proto3" json:"adminErrorLog,omitempty"`
	SslCipherSuite                     string              `protobuf:"bytes,154,opt,name=sslCipherSuite,json=ssl_cipher_suite,proto3" json:"sslCipherSuite,omitempty"`
	PgDatabase                         string              `protobuf:"bytes,155,opt,name=pgDatabase,json=pg_database,proto3" json:"pgDatabase,omitempty"`
	NginxMainWorkerRlimitNofile        string              `protobuf:"bytes,156,opt,name=nginxMainWorkerRlimitNofile,json=nginx_main_worker_rlimit_nofile,proto3" json:"nginxMainWorkerRlimitNofile,omitempty"`
	KongEnv                            string              `protobuf:"bytes,157,opt,name=kongEnv,json=kong_env,proto3" json:"kongEnv,omitempty"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kong_admin_proxy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_kong_admin_proxy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_kong_admin_proxy_proto_rawDescGZIP(), []int{4}
}

func (x *Configuration) GetAdminAccessLog() string {
	if x != nil {
		return x.AdminAccessLog
	}
	return ""
}

func (x *Configuration) GetNginxProxyRealIpRecursive() string {
	if x != nil {
		return x.NginxProxyRealIpRecursive
	}
	return ""
}

func (x *Configuration) GetAnonymousReports() bool {
	if x != nil {
		return x.AnonymousReports
	}
	return false
}

func (x *Configuration) GetStatusListen() []string {
	if x != nil {
		return x.StatusListen
	}
	return nil
}

func (x *Configuration) GetLoadedPlugins() map[string]bool {
	if x != nil {
		return x.LoadedPlugins
	}
	return nil
}

func (x *Configuration) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Configuration) GetUpstreamKeepaliveMaxRequests() float32 {
	if x != nil {
		return x.UpstreamKeepaliveMaxRequests
	}
	return 0
}

func (x *Configuration) GetDbResurrectTtl() float32 {
	if x != nil {
		return x.DbResurrectTtl
	}
	return 0
}

func (x *Configuration) GetNginxEventsDirectives() []*KeyValuePair {
	if x != nil {
		return x.NginxEventsDirectives
	}
	return nil
}

func (x *Configuration) GetNginxSupstreamDirectives() map[string]*any.Any {
	if x != nil {
		return x.NginxSupstreamDirectives
	}
	return nil
}

func (x *Configuration) GetLuaPackageCpath() string {
	if x != nil {
		return x.LuaPackageCpath
	}
	return ""
}

func (x *Configuration) GetPgUser() string {
	if x != nil {
		return x.PgUser
	}
	return ""
}

func (x *Configuration) GetNginxKongStreamConf() string {
	if x != nil {
		return x.NginxKongStreamConf
	}
	return ""
}

func (x *Configuration) GetDbUpdateFrequency() float32 {
	if x != nil {
		return x.DbUpdateFrequency
	}
	return 0
}

func (x *Configuration) GetNginxUpstreamKeepaliveRequests() string {
	if x != nil {
		return x.NginxUpstreamKeepaliveRequests
	}
	return ""
}

func (x *Configuration) GetCassandraContactPoints() []string {
	if x != nil {
		return x.CassandraContactPoints
	}
	return nil
}

func (x *Configuration) GetCassandraReplFactor() float32 {
	if x != nil {
		return x.CassandraReplFactor
	}
	return 0
}

func (x *Configuration) GetRealIpRecursive() string {
	if x != nil {
		return x.RealIpRecursive
	}
	return ""
}

func (x *Configuration) GetNginxHttpUpstreamKeepaliveTimeout() string {
	if x != nil {
		return x.NginxHttpUpstreamKeepaliveTimeout
	}
	return ""
}

func (x *Configuration) GetPgSslVerify() bool {
	if x != nil {
		return x.PgSslVerify
	}
	return false
}

func (x *Configuration) GetAdminSslCertKey() string {
	if x != nil {
		return x.AdminSslCertKey
	}
	return ""
}

func (x *Configuration) GetSslSessionTickets() string {
	if x != nil {
		return x.SslSessionTickets
	}
	return ""
}

func (x *Configuration) GetDnsErrorTtl() float32 {
	if x != nil {
		return x.DnsErrorTtl
	}
	return 0
}

func (x *Configuration) GetNginxOptimizations() bool {
	if x != nil {
		return x.NginxOptimizations
	}
	return false
}

func (x *Configuration) GetNginxStreamDirectives() []*KeyValuePair {
	if x != nil {
		return x.NginxStreamDirectives
	}
	return nil
}

func (x *Configuration) GetProxyListeners() []*Listener {
	if x != nil {
		return x.ProxyListeners
	}
	return nil
}

func (x *Configuration) GetNginxWorkerProcesses() string {
	if x != nil {
		return x.NginxWorkerProcesses
	}
	return ""
}

func (x *Configuration) GetAdminSslCertDefault() string {
	if x != nil {
		return x.AdminSslCertDefault
	}
	return ""
}

func (x *Configuration) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *Configuration) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *Configuration) GetHeaders() []string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Configuration) GetStatusListeners() map[string]*any.Any {
	if x != nil {
		return x.StatusListeners
	}
	return nil
}

func (x *Configuration) GetNginxAdminDirectives() map[string]*any.Any {
	if x != nil {
		return x.NginxAdminDirectives
	}
	return nil
}

func (x *Configuration) GetStatusAccessLog() string {
	if x != nil {
		return x.StatusAccessLog
	}
	return ""
}

func (x *Configuration) GetTrustedIps() map[string]*any.Any {
	if x != nil {
		return x.TrustedIps
	}
	return nil
}

func (x *Configuration) GetNginxSproxyDirectives() map[string]*any.Any {
	if x != nil {
		return x.NginxSproxyDirectives
	}
	return nil
}

func (x *Configuration) GetSslCert() string {
	if x != nil {
		return x.SslCert
	}
	return ""
}

func (x *Configuration) GetProxyAccessLog() string {
	if x != nil {
		return x.ProxyAccessLog
	}
	return ""
}

func (x *Configuration) GetPgSemaphoreTimeout() float32 {
	if x != nil {
		return x.PgSemaphoreTimeout
	}
	return 0
}

func (x *Configuration) GetUpstreamKeepaliveIdleTimeout() float32 {
	if x != nil {
		return x.UpstreamKeepaliveIdleTimeout
	}
	return 0
}

func (x *Configuration) GetPgPort() float32 {
	if x != nil {
		return x.PgPort
	}
	return 0
}

func (x *Configuration) GetMemCacheSize() string {
	if x != nil {
		return x.MemCacheSize
	}
	return ""
}

func (x *Configuration) GetGoPluginsDir() string {
	if x != nil {
		return x.GoPluginsDir
	}
	return ""
}

func (x *Configuration) GetNginxProxyRealIpHeader() string {
	if x != nil {
		return x.NginxProxyRealIpHeader
	}
	return ""
}

func (x *Configuration) GetClientMaxBodySize() string {
	if x != nil {
		return x.ClientMaxBodySize
	}
	return ""
}

func (x *Configuration) GetDnsResolver() map[string]*any.Any {
	if x != nil {
		return x.DnsResolver
	}
	return nil
}

func (x *Configuration) GetSslPreferServerCiphers() string {
	if x != nil {
		return x.SslPreferServerCiphers
	}
	return ""
}

func (x *Configuration) GetDbCacheWarmupEntities() []string {
	if x != nil {
		return x.DbCacheWarmupEntities
	}
	return nil
}

func (x *Configuration) GetDnsStaleTtl() float32 {
	if x != nil {
		return x.DnsStaleTtl
	}
	return 0
}

func (x *Configuration) GetClusterMtls() string {
	if x != nil {
		return x.ClusterMtls
	}
	return ""
}

func (x *Configuration) GetStatusErrorLog() string {
	if x != nil {
		return x.StatusErrorLog
	}
	return ""
}

func (x *Configuration) GetNginxStreamSslPreferServerCiphers() string {
	if x != nil {
		return x.NginxStreamSslPreferServerCiphers
	}
	return ""
}

func (x *Configuration) GetProxyListen() []string {
	if x != nil {
		return x.ProxyListen
	}
	return nil
}

func (x *Configuration) GetClientSslCertDefault() string {
	if x != nil {
		return x.ClientSslCertDefault
	}
	return ""
}

func (x *Configuration) GetEnabledHeaders() map[string]bool {
	if x != nil {
		return x.EnabledHeaders
	}
	return nil
}

func (x *Configuration) GetAdminSslCertKeyDefault() string {
	if x != nil {
		return x.AdminSslCertKeyDefault
	}
	return ""
}

func (x *Configuration) GetWorkerConsistency() string {
	if x != nil {
		return x.WorkerConsistency
	}
	return ""
}

func (x *Configuration) GetNginxHttpDirectives() []*KeyValuePair {
	if x != nil {
		return x.NginxHttpDirectives
	}
	return nil
}

func (x *Configuration) GetCassandraSsl() bool {
	if x != nil {
		return x.CassandraSsl
	}
	return false
}

func (x *Configuration) GetAdminSslCert() string {
	if x != nil {
		return x.AdminSslCert
	}
	return ""
}

func (x *Configuration) GetStreamProxySslEnabled() bool {
	if x != nil {
		return x.StreamProxySslEnabled
	}
	return false
}

func (x *Configuration) GetCassandraLbPolicy() string {
	if x != nil {
		return x.CassandraLbPolicy
	}
	return ""
}

func (x *Configuration) GetSslProtocols() string {
	if x != nil {
		return x.SslProtocols
	}
	return ""
}

func (x *Configuration) GetPortMaps() map[string]*any.Any {
	if x != nil {
		return x.PortMaps
	}
	return nil
}

func (x *Configuration) GetUpstreamKeepalive() float32 {
	if x != nil {
		return x.UpstreamKeepalive
	}
	return 0
}

func (x *Configuration) GetCassandraSslVerify() bool {
	if x != nil {
		return x.CassandraSslVerify
	}
	return false
}

func (x *Configuration) GetRealIpHeader() string {
	if x != nil {
		return x.RealIpHeader
	}
	return ""
}

func (x *Configuration) GetNginxDaemon() string {
	if x != nil {
		return x.NginxDaemon
	}
	return ""
}

func (x *Configuration) GetStreamListeners() map[string]*any.Any {
	if x != nil {
		return x.StreamListeners
	}
	return nil
}

func (x *Configuration) GetSslCiphers() string {
	if x != nil {
		return x.SslCiphers
	}
	return ""
}

func (x *Configuration) GetCassandraSchemaConsensusTimeout() float32 {
	if x != nil {
		return x.CassandraSchemaConsensusTimeout
	}
	return 0
}

func (x *Configuration) GetNginxHttpUpstreamKeepaliveRequests() string {
	if x != nil {
		return x.NginxHttpUpstreamKeepaliveRequests
	}
	return ""
}

func (x *Configuration) GetProxySslEnabled() bool {
	if x != nil {
		return x.ProxySslEnabled
	}
	return false
}

func (x *Configuration) GetClientSslCertKeyDefault() string {
	if x != nil {
		return x.ClientSslCertKeyDefault
	}
	return ""
}

func (x *Configuration) GetClusterListen() []string {
	if x != nil {
		return x.ClusterListen
	}
	return nil
}

func (x *Configuration) GetPgSsl() bool {
	if x != nil {
		return x.PgSsl
	}
	return false
}

func (x *Configuration) GetSslCertKey() string {
	if x != nil {
		return x.SslCertKey
	}
	return ""
}

func (x *Configuration) GetLuaSocketPoolSize() float32 {
	if x != nil {
		return x.LuaSocketPoolSize
	}
	return 0
}

func (x *Configuration) GetWorkerStateUpdateFrequency() float32 {
	if x != nil {
		return x.WorkerStateUpdateFrequency
	}
	return 0
}

func (x *Configuration) GetPgRoSsl() bool {
	if x != nil {
		return x.PgRoSsl
	}
	return false
}

func (x *Configuration) GetNginxEventsWorkerConnections() string {
	if x != nil {
		return x.NginxEventsWorkerConnections
	}
	return ""
}

func (x *Configuration) GetNginxMainDaemon() string {
	if x != nil {
		return x.NginxMainDaemon
	}
	return ""
}

func (x *Configuration) GetDnsNoSync() bool {
	if x != nil {
		return x.DnsNoSync
	}
	return false
}

func (x *Configuration) GetAdminListen() []string {
	if x != nil {
		return x.AdminListen
	}
	return nil
}

func (x *Configuration) GetCassandraPort() float32 {
	if x != nil {
		return x.CassandraPort
	}
	return 0
}

func (x *Configuration) GetNginxMainDirectives() []*KeyValuePair {
	if x != nil {
		return x.NginxMainDirectives
	}
	return nil
}

func (x *Configuration) GetStatusSslCertDefault() string {
	if x != nil {
		return x.StatusSslCertDefault
	}
	return ""
}

func (x *Configuration) GetClientBodyBufferSize() string {
	if x != nil {
		return x.ClientBodyBufferSize
	}
	return ""
}

func (x *Configuration) GetNginxUpstreamDirectives() []*KeyValuePair {
	if x != nil {
		return x.NginxUpstreamDirectives
	}
	return nil
}

func (x *Configuration) GetNginxHttpSslPreferServerCiphers() string {
	if x != nil {
		return x.NginxHttpSslPreferServerCiphers
	}
	return ""
}

func (x *Configuration) GetNginxStreamSslSessionTimeout() string {
	if x != nil {
		return x.NginxStreamSslSessionTimeout
	}
	return ""
}

func (x *Configuration) GetPgTimeout() float32 {
	if x != nil {
		return x.PgTimeout
	}
	return 0
}

func (x *Configuration) GetNginxHttpClientMaxBodySize() string {
	if x != nil {
		return x.NginxHttpClientMaxBodySize
	}
	return ""
}

func (x *Configuration) GetStatusSslEnabled() bool {
	if x != nil {
		return x.StatusSslEnabled
	}
	return false
}

func (x *Configuration) GetNginxUpstreamKeepaliveTimeout() string {
	if x != nil {
		return x.NginxUpstreamKeepaliveTimeout
	}
	return ""
}

func (x *Configuration) GetNginxHttpStatusDirectives() map[string]*any.Any {
	if x != nil {
		return x.NginxHttpStatusDirectives
	}
	return nil
}

func (x *Configuration) GetDnsHostsfile() string {
	if x != nil {
		return x.DnsHostsfile
	}
	return ""
}

func (x *Configuration) GetPlugins() []string {
	if x != nil {
		return x.Plugins
	}
	return nil
}

func (x *Configuration) GetCassandraUsername() string {
	if x != nil {
		return x.CassandraUsername
	}
	return ""
}

func (x *Configuration) GetNginxErrLogs() string {
	if x != nil {
		return x.NginxErrLogs
	}
	return ""
}

func (x *Configuration) GetNginxMainWorkerProcesses() string {
	if x != nil {
		return x.NginxMainWorkerProcesses
	}
	return ""
}

func (x *Configuration) GetKic() bool {
	if x != nil {
		return x.Kic
	}
	return false
}

func (x *Configuration) GetClusterControlPlane() string {
	if x != nil {
		return x.ClusterControlPlane
	}
	return ""
}

func (x *Configuration) GetNginxHttpClientBodyBufferSize() string {
	if x != nil {
		return x.NginxHttpClientBodyBufferSize
	}
	return ""
}

func (x *Configuration) GetNginxKongConf() string {
	if x != nil {
		return x.NginxKongConf
	}
	return ""
}

func (x *Configuration) GetClientSsl() bool {
	if x != nil {
		return x.ClientSsl
	}
	return false
}

func (x *Configuration) GetSslCertDefault() string {
	if x != nil {
		return x.SslCertDefault
	}
	return ""
}

func (x *Configuration) GetDnsOrder() []string {
	if x != nil {
		return x.DnsOrder
	}
	return nil
}

func (x *Configuration) GetNginxProxyDirectives() []*KeyValuePair {
	if x != nil {
		return x.NginxProxyDirectives
	}
	return nil
}

func (x *Configuration) GetStatusSslCertKeyDefault() string {
	if x != nil {
		return x.StatusSslCertKeyDefault
	}
	return ""
}

func (x *Configuration) GetAdminListeners() []*Listener {
	if x != nil {
		return x.AdminListeners
	}
	return nil
}

func (x *Configuration) GetNginxConf() string {
	if x != nil {
		return x.NginxConf
	}
	return ""
}

func (x *Configuration) GetAdminSslEnabled() bool {
	if x != nil {
		return x.AdminSslEnabled
	}
	return false
}

func (x *Configuration) GetNginxHttpUpstreamKeepalive() string {
	if x != nil {
		return x.NginxHttpUpstreamKeepalive
	}
	return ""
}

func (x *Configuration) GetPgHost() string {
	if x != nil {
		return x.PgHost
	}
	return ""
}

func (x *Configuration) GetGoPluginserverExe() string {
	if x != nil {
		return x.GoPluginserverExe
	}
	return ""
}

func (x *Configuration) GetDbCacheTtl() float32 {
	if x != nil {
		return x.DbCacheTtl
	}
	return 0
}

func (x *Configuration) GetUpstreamKeepalivePoolSize() float32 {
	if x != nil {
		return x.UpstreamKeepalivePoolSize
	}
	return 0
}

func (x *Configuration) GetAdminAccLogs() string {
	if x != nil {
		return x.AdminAccLogs
	}
	return ""
}

func (x *Configuration) GetNginxEventsMultiAccept() string {
	if x != nil {
		return x.NginxEventsMultiAccept
	}
	return ""
}

func (x *Configuration) GetSslCertKeyDefault() string {
	if x != nil {
		return x.SslCertKeyDefault
	}
	return ""
}

func (x *Configuration) GetLuaSslVerifyDepth() float32 {
	if x != nil {
		return x.LuaSslVerifyDepth
	}
	return 0
}

func (x *Configuration) GetCassandraReadConsistency() string {
	if x != nil {
		return x.CassandraReadConsistency
	}
	return ""
}

func (x *Configuration) GetDbUpdatePropagation() float32 {
	if x != nil {
		return x.DbUpdatePropagation
	}
	return 0
}

func (x *Configuration) GetNginxStreamSslSessionTickets() string {
	if x != nil {
		return x.NginxStreamSslSessionTickets
	}
	return ""
}

func (x *Configuration) GetPgMaxConcurrentQueries() float32 {
	if x != nil {
		return x.PgMaxConcurrentQueries
	}
	return 0
}

func (x *Configuration) GetDnsNotFoundTtl() float32 {
	if x != nil {
		return x.DnsNotFoundTtl
	}
	return 0
}

func (x *Configuration) GetStreamListen() []string {
	if x != nil {
		return x.StreamListen
	}
	return nil
}

func (x *Configuration) GetCassandraRefreshFrequency() float32 {
	if x != nil {
		return x.CassandraRefreshFrequency
	}
	return 0
}

func (x *Configuration) GetLogLevel() string {
	if x != nil {
		return x.LogLevel
	}
	return ""
}

func (x *Configuration) GetNginxStreamSslProtocols() string {
	if x != nil {
		return x.NginxStreamSslProtocols
	}
	return ""
}

func (x *Configuration) GetErrorDefaultType() string {
	if x != nil {
		return x.ErrorDefaultType
	}
	return ""
}

func (x *Configuration) GetPgRoSslVerify() bool {
	if x != nil {
		return x.PgRoSslVerify
	}
	return false
}

func (x *Configuration) GetNginxHttpSslSessionTickets() string {
	if x != nil {
		return x.NginxHttpSslSessionTickets
	}
	return ""
}

func (x *Configuration) GetCassandraReplStrategy() string {
	if x != nil {
		return x.CassandraReplStrategy
	}
	return ""
}

func (x *Configuration) GetCassandraTimeout() float32 {
	if x != nil {
		return x.CassandraTimeout
	}
	return 0
}

func (x *Configuration) GetNginxHttpUpstreamDirectives() []*KeyValuePair {
	if x != nil {
		return x.NginxHttpUpstreamDirectives
	}
	return nil
}

func (x *Configuration) GetNginxAccLogs() string {
	if x != nil {
		return x.NginxAccLogs
	}
	return ""
}

func (x *Configuration) GetNginxHttpSslSessionTimeout() string {
	if x != nil {
		return x.NginxHttpSslSessionTimeout
	}
	return ""
}

func (x *Configuration) GetProxyErrorLog() string {
	if x != nil {
		return x.ProxyErrorLog
	}
	return ""
}

func (x *Configuration) GetCassandraKeyspace() string {
	if x != nil {
		return x.CassandraKeyspace
	}
	return ""
}

func (x *Configuration) GetHostPorts() map[string]*any.Any {
	if x != nil {
		return x.HostPorts
	}
	return nil
}

func (x *Configuration) GetSslCertCsrDefault() string {
	if x != nil {
		return x.SslCertCsrDefault
	}
	return ""
}

func (x *Configuration) GetCassandraWriteConsistency() string {
	if x != nil {
		return x.CassandraWriteConsistency
	}
	return ""
}

func (x *Configuration) GetLuaPackagePath() string {
	if x != nil {
		return x.LuaPackagePath
	}
	return ""
}

func (x *Configuration) GetNginxStatusDirectives() map[string]*any.Any {
	if x != nil {
		return x.NginxStatusDirectives
	}
	return nil
}

func (x *Configuration) GetPgPassword() string {
	if x != nil {
		return x.PgPassword
	}
	return ""
}

func (x *Configuration) GetNginxPid() string {
	if x != nil {
		return x.NginxPid
	}
	return ""
}

func (x *Configuration) GetNginxHttpSslProtocols() string {
	if x != nil {
		return x.NginxHttpSslProtocols
	}
	return ""
}

func (x *Configuration) GetCassandraDataCenters() []string {
	if x != nil {
		return x.CassandraDataCenters
	}
	return nil
}

func (x *Configuration) GetSslSessionTimeout() string {
	if x != nil {
		return x.SslSessionTimeout
	}
	return ""
}

func (x *Configuration) GetNginxUpstreamKeepalive() string {
	if x != nil {
		return x.NginxUpstreamKeepalive
	}
	return ""
}

func (x *Configuration) GetAdminErrorLog() string {
	if x != nil {
		return x.AdminErrorLog
	}
	return ""
}

func (x *Configuration) GetSslCipherSuite() string {
	if x != nil {
		return x.SslCipherSuite
	}
	return ""
}

func (x *Configuration) GetPgDatabase() string {
	if x != nil {
		return x.PgDatabase
	}
	return ""
}

func (x *Configuration) GetNginxMainWorkerRlimitNofile() string {
	if x != nil {
		return x.NginxMainWorkerRlimitNofile
	}
	return ""
}

func (x *Configuration) GetKongEnv() string {
	if x != nil {
		return x.KongEnv
	}
	return ""
}

type NodeInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plugins       *Plugins           `protobuf:"bytes,1,opt,name=plugins,proto3" json:"plugins,omitempty"`
	Configuration *Configuration     `protobuf:"bytes,2,opt,name=configuration,proto3" json:"configuration,omitempty"`
	Timers        map[string]float32 `protobuf:"bytes,3,rep,name=timers,proto3" json:"timers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	Hostname      string             `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Tagline       string             `protobuf:"bytes,5,opt,name=tagline,proto3" json:"tagline,omitempty"`
	Version       string             `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	NodeId        string             `protobuf:"bytes,7,opt,name=nodeId,json=node_id,proto3" json:"nodeId,omitempty"`
	LuaVersion    string             `protobuf:"bytes,8,opt,name=luaVersion,json=lua_version,proto3" json:"luaVersion,omitempty"`
	PrngSeeds     map[string]uint64  `protobuf:"bytes,9,rep,name=prngSeeds,json=prng_seeds,proto3" json:"prngSeeds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *NodeInfoResponse) Reset() {
	*x = NodeInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kong_admin_proxy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfoResponse) ProtoMessage() {}

func (x *NodeInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kong_admin_proxy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfoResponse.ProtoReflect.Descriptor instead.
func (*NodeInfoResponse) Descriptor() ([]byte, []int) {
	return file_kong_admin_proxy_proto_rawDescGZIP(), []int{5}
}

func (x *NodeInfoResponse) GetPlugins() *Plugins {
	if x != nil {
		return x.Plugins
	}
	return nil
}

func (x *NodeInfoResponse) GetConfiguration() *Configuration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *NodeInfoResponse) GetTimers() map[string]float32 {
	if x != nil {
		return x.Timers
	}
	return nil
}

func (x *NodeInfoResponse) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *NodeInfoResponse) GetTagline() string {
	if x != nil {
		return x.Tagline
	}
	return ""
}

func (x *NodeInfoResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *NodeInfoResponse) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeInfoResponse) GetLuaVersion() string {
	if x != nil {
		return x.LuaVersion
	}
	return ""
}

func (x *NodeInfoResponse) GetPrngSeeds() map[string]uint64 {
	if x != nil {
		return x.PrngSeeds
	}
	return nil
}

type KongStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KongStatusRequest) Reset() {
	*x = KongStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kong_admin_proxy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KongStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KongStatusRequest) ProtoMessage() {}

func (x *KongStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kong_admin_proxy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KongStatusRequest.ProtoReflect.Descriptor instead.
func (*KongStatusRequest) Descriptor() ([]byte, []int) {
	return file_kong_admin_proxy_proto_rawDescGZIP(), []int{6}
}

type KongStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KongStatusResponse) Reset() {
	*x = KongStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kong_admin_proxy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KongStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KongStatusResponse) ProtoMessage() {}

func (x *KongStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kong_admin_proxy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KongStatusResponse.ProtoReflect.Descriptor instead.
func (*KongStatusResponse) Descriptor() ([]byte, []int) {
	return file_kong_admin_proxy_proto_rawDescGZIP(), []int{7}
}

var File_kong_admin_proxy_proto protoreflect.FileDescriptor

var file_kong_admin_proxy_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x11, 0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x38, 0x0a, 0x0c, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61,
	0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x81, 0x02, 0x0a,
	0x08, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x72, 0x65, 0x75, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x61, 0x63,
	0x6b, 0x6c, 0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x73, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x73,
	0x73, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x74, 0x74, 0x70, 0x32, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x68, 0x74, 0x74, 0x70, 0x32, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x69, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x69, 0x6e, 0x64,
	0x22, 0xd9, 0x01, 0x0a, 0x07, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x10,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x11, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x44, 0x0a, 0x16, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc2, 0x4a, 0x0a,
	0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x12, 0x40, 0x0a, 0x19, 0x6e, 0x67, 0x69, 0x6e,
	0x78, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x61, 0x6c, 0x49, 0x70, 0x52, 0x65, 0x63, 0x75,
	0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x6e, 0x67, 0x69,
	0x6e, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x69, 0x70,
	0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x61, 0x6e,
	0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x53, 0x0a, 0x0d,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x45, 0x0a, 0x1c, 0x75, 0x70, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x4d, 0x61,
	0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x1f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x28, 0x0a, 0x0e, 0x64, 0x62, 0x52, 0x65, 0x73, 0x75, 0x72, 0x72, 0x65, 0x63, 0x74, 0x54,
	0x74, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x64, 0x62, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x74, 0x6c, 0x12, 0x50, 0x0a, 0x15, 0x6e, 0x67,
	0x69, 0x6e, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x6f, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x17, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x75, 0x0a, 0x18,
	0x6e, 0x67, 0x69, 0x6e, 0x78, 0x53, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x53,
	0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1a, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x73,
	0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x0f, 0x6c, 0x75, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x43, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x75,
	0x61, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x17, 0x0a, 0x06, 0x70, 0x67, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x13, 0x6e, 0x67, 0x69, 0x6e,
	0x78, 0x4b, 0x6f, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x6b, 0x6f, 0x6e,
	0x67, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x12, 0x2e, 0x0a,
	0x11, 0x64, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x64, 0x62, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x49, 0x0a,
	0x1e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65,
	0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x75, 0x70, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x16, 0x63, 0x61, 0x73, 0x73,
	0x61, 0x6e, 0x64, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e,
	0x64, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x32, 0x0a, 0x13, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x52,
	0x65, 0x70, 0x6c, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x15, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x6c, 0x49, 0x70,
	0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69,
	0x76, 0x65, 0x12, 0x50, 0x0a, 0x21, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x48, 0x74, 0x74, 0x70, 0x55,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x6e,
	0x67, 0x69, 0x6e, 0x78, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0b, 0x70, 0x67, 0x53, 0x73, 0x6c, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x67, 0x5f, 0x73, 0x73,
	0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x53, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x11, 0x73, 0x73, 0x6c, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x73, 0x73, 0x6c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x54, 0x74, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x64, 0x6e, 0x73, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x74, 0x6c, 0x12, 0x2f, 0x0a, 0x12, 0x6e, 0x67, 0x69,
	0x6e, 0x78, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50, 0x0a, 0x15, 0x6e, 0x67,
	0x69, 0x6e, 0x78, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x6f, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x17, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x1a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x14, 0x6e,
	0x67, 0x69, 0x6e, 0x78, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6e, 0x67, 0x69, 0x6e, 0x78,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x33, 0x0a, 0x13, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x73, 0x6c, 0x43, 0x65, 0x72,
	0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x59, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x6f, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x69, 0x0a, 0x14, 0x6e,
	0x67, 0x69, 0x6e, 0x78, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x6f, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16,
	0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c,
	0x6f, 0x67, 0x12, 0x4a, 0x0a, 0x0a, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x49, 0x70, 0x73,
	0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x49, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x73, 0x12, 0x6c,
	0x0a, 0x15, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x53, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x53, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x17, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x73, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x07,
	0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x73, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f,
	0x67, 0x12, 0x30, 0x0a, 0x12, 0x70, 0x67, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x70,
	0x67, 0x5f, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x45, 0x0a, 0x1c, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b,
	0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1f, 0x75, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64,
	0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x70, 0x67,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x70, 0x67, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x5f, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0c, 0x67, 0x6f, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x44, 0x69, 0x72, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x67, 0x6f, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x12,
	0x3a, 0x0a, 0x16, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x61,
	0x6c, 0x49, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x72, 0x65, 0x61,
	0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x11, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x4d, 0x0a, 0x0b,
	0x64, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x2e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x64,
	0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x16, 0x73,
	0x73, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x73, 0x73, 0x6c,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x15, 0x64, 0x62, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x57, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x30, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x64, 0x62, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x77, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x22, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x54, 0x74, 0x6c, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f,
	0x74, 0x74, 0x6c, 0x12, 0x21, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x74,
	0x6c, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6d, 0x74, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x67,
	0x12, 0x51, 0x0a, 0x21, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53,
	0x73, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x26, 0x6e, 0x67, 0x69,
	0x6e, 0x78, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x18, 0x35, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x35, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x73, 0x6c,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x56, 0x0a,
	0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x37, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x73,
	0x6c, 0x43, 0x65, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x73, 0x6c,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x2d, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x4c, 0x0a, 0x13, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x48, 0x74, 0x74, 0x70, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x3a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x15, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x0c, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x53, 0x73, 0x6c, 0x18, 0x3b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x5f,
	0x73, 0x73, 0x6c, 0x12, 0x24, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x73, 0x6c, 0x43,
	0x65, 0x72, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x12, 0x37, 0x0a, 0x15, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x73, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x2e, 0x0a, 0x11, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x4c,
	0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63,
	0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x5f, 0x6c, 0x62, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x73, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x73, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4d,
	0x61, 0x70, 0x73, 0x18, 0x40, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x6f, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x12, 0x2d, 0x0a,
	0x11, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69,
	0x76, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x12,
	0x63, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x53, 0x73, 0x6c, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x18, 0x42, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e,
	0x64, 0x72, 0x61, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x24,
	0x0a, 0x0c, 0x72, 0x65, 0x61, 0x6c, 0x49, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x43,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0b, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x44, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x67, 0x69, 0x6e, 0x78,
	0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x45, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0a, 0x73, 0x73, 0x6c, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x73,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x73, 0x6c, 0x5f, 0x63, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x1f, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x47, 0x20, 0x01, 0x28, 0x02, 0x52, 0x22, 0x63, 0x61,
	0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x52, 0x0a, 0x22, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x48, 0x74, 0x74, 0x70, 0x55, 0x70, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x26, 0x6e, 0x67,
	0x69, 0x6e, 0x78, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x73, 0x6c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x49, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x3c, 0x0a, 0x17, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x73, 0x6c, 0x43, 0x65, 0x72,
	0x74, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x4a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x25,
	0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x18,
	0x4b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x15, 0x0a, 0x05, 0x70, 0x67, 0x53, 0x73, 0x6c, 0x18, 0x4c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x67, 0x5f, 0x73, 0x73, 0x6c, 0x12, 0x20, 0x0a, 0x0a,
	0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x73, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x2f,
	0x0a, 0x11, 0x6c, 0x75, 0x61, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x6c, 0x75, 0x61, 0x5f, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x41, 0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x4f, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x1d, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x1a, 0x0a, 0x07, 0x70, 0x67, 0x52, 0x6f, 0x53, 0x73, 0x6c, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x67, 0x5f, 0x72, 0x6f, 0x5f, 0x73, 0x73, 0x6c, 0x12, 0x45,
	0x0a, 0x1c, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x51,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x0f, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x4d, 0x61,
	0x69, 0x6e, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x09, 0x64, 0x6e, 0x73, 0x4e, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x53,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x73, 0x79, 0x6e,
	0x63, 0x12, 0x21, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x18, 0x54, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0d, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72,
	0x61, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x55, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x63, 0x61, 0x73,
	0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4c, 0x0a, 0x13, 0x6e,
	0x67, 0x69, 0x6e, 0x78, 0x4d, 0x61, 0x69, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x73, 0x18, 0x56, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x15, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x14, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x53, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x73, 0x73, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x35, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x58, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x54, 0x0a, 0x17, 0x6e, 0x67, 0x69, 0x6e, 0x78,
	0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x73, 0x18, 0x59, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x19, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x4d, 0x0a,
	0x1f, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x48, 0x74, 0x74, 0x70, 0x53, 0x73, 0x6c, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x73,
	0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x24, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x1c,
	0x6e, 0x67, 0x69, 0x6e, 0x78, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x73, 0x6c, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x5b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x20, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x70, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x43, 0x0a, 0x1a, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x48, 0x74, 0x74, 0x70,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x73, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x5e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x1d, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x55,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x6e,
	0x67, 0x69, 0x6e, 0x78, 0x5f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6b, 0x65,
	0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x79, 0x0a, 0x19, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x48, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x60, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x67,
	0x69, 0x6e, 0x78, 0x48, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1c, 0x6e, 0x67,
	0x69, 0x6e, 0x78, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6e,
	0x73, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x61, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x6e, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x62, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x11, 0x63, 0x61, 0x73,
	0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x63,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0c, 0x6e, 0x67, 0x69, 0x6e,
	0x78, 0x45, 0x72, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x3d,
	0x0a, 0x18, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x4d, 0x61, 0x69, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1b, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x69, 0x63, 0x18, 0x66, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x69, 0x63, 0x12,
	0x32, 0x0a, 0x13, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x12, 0x49, 0x0a, 0x1d, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x48, 0x74, 0x74, 0x70,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x6e, 0x67, 0x69, 0x6e,
	0x78, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6f,
	0x64, 0x79, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x26,
	0x0a, 0x0d, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x4b, 0x6f, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x18,
	0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x6b, 0x6f, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x12, 0x1d, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x73, 0x6c, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x73, 0x6c, 0x12, 0x28, 0x0a, 0x0e, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x73, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x1b, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x6c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x6e, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x14,
	0x6e, 0x67, 0x69, 0x6e, 0x78, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x73, 0x18, 0x6d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x6f, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x16, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x17,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x4b, 0x65, 0x79,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x6f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x0f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x6e, 0x67, 0x69,
	0x6e, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x67,
	0x69, 0x6e, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x12, 0x2a, 0x0a, 0x0f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x53, 0x73, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x71, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x1a, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x48, 0x74, 0x74,
	0x70, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69,
	0x76, 0x65, 0x18, 0x72, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6b, 0x65,
	0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x70, 0x67, 0x48, 0x6f, 0x73,
	0x74, 0x18, 0x73, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x67, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x11, 0x67, 0x6f, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x45, 0x78, 0x65, 0x18, 0x74, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x67, 0x6f, 0x5f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x65,
	0x12, 0x20, 0x0a, 0x0a, 0x64, 0x62, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x74, 0x6c, 0x18, 0x75,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x64, 0x62, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x74,
	0x74, 0x6c, 0x12, 0x3f, 0x0a, 0x19, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65,
	0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x76, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1c, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x4c,
	0x6f, 0x67, 0x73, 0x18, 0x77, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x61, 0x63, 0x63, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x16, 0x6e, 0x67, 0x69,
	0x6e, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6e, 0x67, 0x69, 0x6e, 0x78,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x12, 0x2f, 0x0a, 0x11, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x4b,
	0x65, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x79, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x73, 0x73, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x75, 0x61, 0x53, 0x73, 0x6c, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x14, 0x6c, 0x75, 0x61, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x18, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e,
	0x64, 0x72, 0x61, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e,
	0x64, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x32, 0x0a, 0x13, 0x64, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x7c, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x15, 0x64, 0x62, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x1c, 0x6e, 0x67, 0x69, 0x6e,
	0x78, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x73, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20,
	0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x73, 0x6c,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x39, 0x0a, 0x16, 0x70, 0x67, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x19, 0x70, 0x67, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x0e, 0x64,
	0x6e, 0x73, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x74, 0x6c, 0x18, 0x7f, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x11, 0x64, 0x6e, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x74, 0x74, 0x6c, 0x12, 0x24, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x18, 0x80, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x19,
	0x63, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x1b, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a,
	0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x17, 0x6e,
	0x67, 0x69, 0x6e, 0x78, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x73, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x6e,
	0x67, 0x69, 0x6e, 0x78, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x73, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x10, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x84, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x67, 0x52, 0x6f,
	0x53, 0x73, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x70, 0x67, 0x5f, 0x72, 0x6f, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x12, 0x43, 0x0a, 0x1a, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x48, 0x74, 0x74, 0x70, 0x53,
	0x73, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x15, 0x63, 0x61, 0x73, 0x73, 0x61,
	0x6e, 0x64, 0x72, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64,
	0x72, 0x61, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x12, 0x2c, 0x0a, 0x10, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x63, 0x61, 0x73,
	0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x5e,
	0x0a, 0x1b, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x48, 0x74, 0x74, 0x70, 0x55, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x89, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x1e,
	0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x75, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x25,
	0x0a, 0x0c, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x41, 0x63, 0x63, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x8a,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x61, 0x63, 0x63,
	0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x1a, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x48, 0x74,
	0x74, 0x70, 0x53, 0x73, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x6e, 0x67, 0x69, 0x6e,
	0x78, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x27, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x18, 0x8c, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6c, 0x6f, 0x67, 0x12, 0x2e, 0x0a, 0x11, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61,
	0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x8e, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x30, 0x0a,
	0x11, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x43, 0x73, 0x72, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x73, 0x6c, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x5f, 0x63, 0x73, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x3f, 0x0a, 0x19, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x90, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1b, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x5f, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x29, 0x0a, 0x0e, 0x6c, 0x75, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x75, 0x61, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x12, 0x6d, 0x0a, 0x15, 0x6e,
	0x67, 0x69, 0x6e, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x73, 0x18, 0x92, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x6f,
	0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x17, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0a, 0x70, 0x67,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x93, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x67, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x08,
	0x6e, 0x67, 0x69, 0x6e, 0x78, 0x50, 0x69, 0x64, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x70, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x15, 0x6e, 0x67,
	0x69, 0x6e, 0x78, 0x48, 0x74, 0x74, 0x70, 0x53, 0x73, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6e, 0x67, 0x69, 0x6e,
	0x78, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x12, 0x35, 0x0a, 0x14, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x96, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x16, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x11, 0x73,
	0x73, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x73, 0x6c, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x39, 0x0a, 0x16,
	0x6e, 0x67, 0x69, 0x6e, 0x78, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x65,
	0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6e,
	0x67, 0x69, 0x6e, 0x78, 0x5f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6b, 0x65,
	0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x67,
	0x12, 0x29, 0x0a, 0x0e, 0x73, 0x73, 0x6c, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x73, 0x6c, 0x5f, 0x63,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x70,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x45, 0x0a,
	0x1b, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x4d, 0x61, 0x69, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x52, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x9c, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1f, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6e, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x6b, 0x6f, 0x6e, 0x67, 0x45, 0x6e, 0x76, 0x18,
	0x9d, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x76,
	0x1a, 0x40, 0x0a, 0x12, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x61, 0x0a, 0x1d, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x53, 0x75, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x5d, 0x0a, 0x19, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53,
	0x0a, 0x0f, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x49, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x5e, 0x0a, 0x1a, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x53, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x10, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x51, 0x0a, 0x0d,
	0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x58, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x62, 0x0a, 0x1e, 0x4e, 0x67, 0x69,
	0x6e, 0x78, 0x48, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x52, 0x0a,
	0x0e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x5e, 0x0a, 0x1a, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x93, 0x04, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x07, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b,
	0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x6c, 0x75, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x75, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x09, 0x70, 0x72, 0x6e, 0x67, 0x53, 0x65, 0x65, 0x64, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6e, 0x67, 0x53, 0x65, 0x65, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x73, 0x1a, 0x39,
	0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x50, 0x72, 0x6e,
	0x67, 0x53, 0x65, 0x65, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x13, 0x0a, 0x11, 0x4b, 0x6f, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x14, 0x0a, 0x12,
	0x4b, 0x6f, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0x9e, 0x01, 0x0a, 0x05, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x47, 0x0a, 0x08,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x4b, 0x6f, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4b,
	0x6f, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x12, 0x5a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x69, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kong_admin_proxy_proto_rawDescOnce sync.Once
	file_kong_admin_proxy_proto_rawDescData = file_kong_admin_proxy_proto_rawDesc
)

func file_kong_admin_proxy_proto_rawDescGZIP() []byte {
	file_kong_admin_proxy_proto_rawDescOnce.Do(func() {
		file_kong_admin_proxy_proto_rawDescData = protoimpl.X.CompressGZIP(file_kong_admin_proxy_proto_rawDescData)
	})
	return file_kong_admin_proxy_proto_rawDescData
}

var file_kong_admin_proxy_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_kong_admin_proxy_proto_goTypes = []interface{}{
	(*NodeInfoRequest)(nil),    // 0: kong.proxy.NodeInfoRequest
	(*KeyValuePair)(nil),       // 1: kong.proxy.KeyValuePair
	(*Listener)(nil),           // 2: kong.proxy.Listener
	(*Plugins)(nil),            // 3: kong.proxy.Plugins
	(*Configuration)(nil),      // 4: kong.proxy.Configuration
	(*NodeInfoResponse)(nil),   // 5: kong.proxy.NodeInfoResponse
	(*KongStatusRequest)(nil),  // 6: kong.proxy.KongStatusRequest
	(*KongStatusResponse)(nil), // 7: kong.proxy.KongStatusResponse
	nil,                        // 8: kong.proxy.Plugins.AvailableOnServerEntry
	nil,                        // 9: kong.proxy.Configuration.LoadedPluginsEntry
	nil,                        // 10: kong.proxy.Configuration.NginxSupstreamDirectivesEntry
	nil,                        // 11: kong.proxy.Configuration.StatusListenersEntry
	nil,                        // 12: kong.proxy.Configuration.NginxAdminDirectivesEntry
	nil,                        // 13: kong.proxy.Configuration.TrustedIpsEntry
	nil,                        // 14: kong.proxy.Configuration.NginxSproxyDirectivesEntry
	nil,                        // 15: kong.proxy.Configuration.DnsResolverEntry
	nil,                        // 16: kong.proxy.Configuration.EnabledHeadersEntry
	nil,                        // 17: kong.proxy.Configuration.PortMapsEntry
	nil,                        // 18: kong.proxy.Configuration.StreamListenersEntry
	nil,                        // 19: kong.proxy.Configuration.NginxHttpStatusDirectivesEntry
	nil,                        // 20: kong.proxy.Configuration.HostPortsEntry
	nil,                        // 21: kong.proxy.Configuration.NginxStatusDirectivesEntry
	nil,                        // 22: kong.proxy.NodeInfoResponse.TimersEntry
	nil,                        // 23: kong.proxy.NodeInfoResponse.PrngSeedsEntry
	(*any.Any)(nil),            // 24: google.protobuf.Any
}
var file_kong_admin_proxy_proto_depIdxs = []int32{
	8,  // 0: kong.proxy.Plugins.availableOnServer:type_name -> kong.proxy.Plugins.AvailableOnServerEntry
	9,  // 1: kong.proxy.Configuration.loadedPlugins:type_name -> kong.proxy.Configuration.LoadedPluginsEntry
	1,  // 2: kong.proxy.Configuration.nginxEventsDirectives:type_name -> kong.proxy.KeyValuePair
	10, // 3: kong.proxy.Configuration.nginxSupstreamDirectives:type_name -> kong.proxy.Configuration.NginxSupstreamDirectivesEntry
	1,  // 4: kong.proxy.Configuration.nginxStreamDirectives:type_name -> kong.proxy.KeyValuePair
	2,  // 5: kong.proxy.Configuration.proxyListeners:type_name -> kong.proxy.Listener
	11, // 6: kong.proxy.Configuration.statusListeners:type_name -> kong.proxy.Configuration.StatusListenersEntry
	12, // 7: kong.proxy.Configuration.nginxAdminDirectives:type_name -> kong.proxy.Configuration.NginxAdminDirectivesEntry
	13, // 8: kong.proxy.Configuration.trustedIps:type_name -> kong.proxy.Configuration.TrustedIpsEntry
	14, // 9: kong.proxy.Configuration.nginxSproxyDirectives:type_name -> kong.proxy.Configuration.NginxSproxyDirectivesEntry
	15, // 10: kong.proxy.Configuration.dnsResolver:type_name -> kong.proxy.Configuration.DnsResolverEntry
	16, // 11: kong.proxy.Configuration.enabledHeaders:type_name -> kong.proxy.Configuration.EnabledHeadersEntry
	1,  // 12: kong.proxy.Configuration.nginxHttpDirectives:type_name -> kong.proxy.KeyValuePair
	17, // 13: kong.proxy.Configuration.portMaps:type_name -> kong.proxy.Configuration.PortMapsEntry
	18, // 14: kong.proxy.Configuration.streamListeners:type_name -> kong.proxy.Configuration.StreamListenersEntry
	1,  // 15: kong.proxy.Configuration.nginxMainDirectives:type_name -> kong.proxy.KeyValuePair
	1,  // 16: kong.proxy.Configuration.nginxUpstreamDirectives:type_name -> kong.proxy.KeyValuePair
	19, // 17: kong.proxy.Configuration.nginxHttpStatusDirectives:type_name -> kong.proxy.Configuration.NginxHttpStatusDirectivesEntry
	1,  // 18: kong.proxy.Configuration.nginxProxyDirectives:type_name -> kong.proxy.KeyValuePair
	2,  // 19: kong.proxy.Configuration.adminListeners:type_name -> kong.proxy.Listener
	1,  // 20: kong.proxy.Configuration.nginxHttpUpstreamDirectives:type_name -> kong.proxy.KeyValuePair
	20, // 21: kong.proxy.Configuration.hostPorts:type_name -> kong.proxy.Configuration.HostPortsEntry
	21, // 22: kong.proxy.Configuration.nginxStatusDirectives:type_name -> kong.proxy.Configuration.NginxStatusDirectivesEntry
	3,  // 23: kong.proxy.NodeInfoResponse.plugins:type_name -> kong.proxy.Plugins
	4,  // 24: kong.proxy.NodeInfoResponse.configuration:type_name -> kong.proxy.Configuration
	22, // 25: kong.proxy.NodeInfoResponse.timers:type_name -> kong.proxy.NodeInfoResponse.TimersEntry
	23, // 26: kong.proxy.NodeInfoResponse.prngSeeds:type_name -> kong.proxy.NodeInfoResponse.PrngSeedsEntry
	24, // 27: kong.proxy.Configuration.NginxSupstreamDirectivesEntry.value:type_name -> google.protobuf.Any
	24, // 28: kong.proxy.Configuration.StatusListenersEntry.value:type_name -> google.protobuf.Any
	24, // 29: kong.proxy.Configuration.NginxAdminDirectivesEntry.value:type_name -> google.protobuf.Any
	24, // 30: kong.proxy.Configuration.TrustedIpsEntry.value:type_name -> google.protobuf.Any
	24, // 31: kong.proxy.Configuration.NginxSproxyDirectivesEntry.value:type_name -> google.protobuf.Any
	24, // 32: kong.proxy.Configuration.DnsResolverEntry.value:type_name -> google.protobuf.Any
	24, // 33: kong.proxy.Configuration.PortMapsEntry.value:type_name -> google.protobuf.Any
	24, // 34: kong.proxy.Configuration.StreamListenersEntry.value:type_name -> google.protobuf.Any
	24, // 35: kong.proxy.Configuration.NginxHttpStatusDirectivesEntry.value:type_name -> google.protobuf.Any
	24, // 36: kong.proxy.Configuration.HostPortsEntry.value:type_name -> google.protobuf.Any
	24, // 37: kong.proxy.Configuration.NginxStatusDirectivesEntry.value:type_name -> google.protobuf.Any
	0,  // 38: kong.proxy.Admin.NodeInfo:input_type -> kong.proxy.NodeInfoRequest
	6,  // 39: kong.proxy.Admin.GetStatus:input_type -> kong.proxy.KongStatusRequest
	5,  // 40: kong.proxy.Admin.NodeInfo:output_type -> kong.proxy.NodeInfoResponse
	7,  // 41: kong.proxy.Admin.GetStatus:output_type -> kong.proxy.KongStatusResponse
	40, // [40:42] is the sub-list for method output_type
	38, // [38:40] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_kong_admin_proxy_proto_init() }
func file_kong_admin_proxy_proto_init() {
	if File_kong_admin_proxy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kong_admin_proxy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kong_admin_proxy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValuePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kong_admin_proxy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Listener); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kong_admin_proxy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plugins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kong_admin_proxy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kong_admin_proxy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kong_admin_proxy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KongStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kong_admin_proxy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KongStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kong_admin_proxy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kong_admin_proxy_proto_goTypes,
		DependencyIndexes: file_kong_admin_proxy_proto_depIdxs,
		MessageInfos:      file_kong_admin_proxy_proto_msgTypes,
	}.Build()
	File_kong_admin_proxy_proto = out.File
	file_kong_admin_proxy_proto_rawDesc = nil
	file_kong_admin_proxy_proto_goTypes = nil
	file_kong_admin_proxy_proto_depIdxs = nil
}
