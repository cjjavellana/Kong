// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ipc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SmitzClient is the client API for Smitz service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SmitzClient interface {
	NodeInfo(ctx context.Context, in *NodeInfoRequest, opts ...grpc.CallOption) (*NodeInfoResponse, error)
	GetStatus(ctx context.Context, in *KongStatusRequest, opts ...grpc.CallOption) (*KongStatusResponse, error)
}

type smitzClient struct {
	cc grpc.ClientConnInterface
}

func NewSmitzClient(cc grpc.ClientConnInterface) SmitzClient {
	return &smitzClient{cc}
}

func (c *smitzClient) NodeInfo(ctx context.Context, in *NodeInfoRequest, opts ...grpc.CallOption) (*NodeInfoResponse, error) {
	out := new(NodeInfoResponse)
	err := c.cc.Invoke(ctx, "/gw.Smitz/NodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smitzClient) GetStatus(ctx context.Context, in *KongStatusRequest, opts ...grpc.CallOption) (*KongStatusResponse, error) {
	out := new(KongStatusResponse)
	err := c.cc.Invoke(ctx, "/gw.Smitz/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmitzServer is the server API for Smitz service.
// All implementations must embed UnimplementedSmitzServer
// for forward compatibility
type SmitzServer interface {
	NodeInfo(context.Context, *NodeInfoRequest) (*NodeInfoResponse, error)
	GetStatus(context.Context, *KongStatusRequest) (*KongStatusResponse, error)
	mustEmbedUnimplementedSmitzServer()
}

// UnimplementedSmitzServer must be embedded to have forward compatible implementations.
type UnimplementedSmitzServer struct {
}

func (*UnimplementedSmitzServer) NodeInfo(context.Context, *NodeInfoRequest) (*NodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeInfo not implemented")
}
func (*UnimplementedSmitzServer) GetStatus(context.Context, *KongStatusRequest) (*KongStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (*UnimplementedSmitzServer) mustEmbedUnimplementedSmitzServer() {}

func RegisterSmitzServer(s *grpc.Server, srv SmitzServer) {
	s.RegisterService(&_Smitz_serviceDesc, srv)
}

func _Smitz_NodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmitzServer).NodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.Smitz/NodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmitzServer).NodeInfo(ctx, req.(*NodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Smitz_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KongStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmitzServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.Smitz/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmitzServer).GetStatus(ctx, req.(*KongStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Smitz_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gw.Smitz",
	HandlerType: (*SmitzServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NodeInfo",
			Handler:    _Smitz_NodeInfo_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _Smitz_GetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "smitz.proto",
}
